@page "/list-solution"
@inject HttpClient client
@inject NavigationManager navigation

<h2>Záznamy tiskáren</h2>

<MudTable Items="@Solutions" Hover="true" Loading="_loading" LoadingProgressColor="Color.Info" Filter="new Func<dtSolution,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6"></MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Immediate="true" Placeholder="Hledat..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Uživatel</MudTh>
        <MudTh>Požadovaná tiskárna</MudTh>
        <MudTh>Navrhovaná tiskárna</MudTh>
        <MudTh>Popis, vyjádření</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Jméno zaměstnance">@Users.SingleOrDefault(x=>x.Id == context.UserId).Name</MudTd>
            <MudTd DataLabel="Kancelář">@Printers.SingleOrDefault(x => x.Id == context.RequestedPrinter).Name</MudTd>
            <MudTd DataLabel="Odbor">@Printers.SingleOrDefault(x => x.Id == @context.SuggestedPrinter).Name</MudTd>
            <MudTd DataLabel="Email">@context.Description</MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.MoreHoriz" Color="Color.Info" OnClick="@(()=>RemoveItem(context.Id))">Info</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>

    @code {
    private IEnumerable<dtSolution> Solutions = new List<dtSolution>();
    private List<dtUser> Users = new List<dtUser>();
    private List<dtDevice> Printers = new List<dtDevice>();
    private bool _loading = false;
    string searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        Solutions = await client.GetFromJsonAsync<List<dtSolution>>("/api/solution");
        Printers = await client.GetFromJsonAsync<List<dtDevice>>("/api/printer");
        Users = await client.GetFromJsonAsync<List<dtUser>>("/api/user");
        _loading = false;
    }

    private bool FilterFunc1(dtSolution element) => FilterFunc(element, searchString);

    private bool FilterFunc(dtSolution element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{Users.SingleOrDefault(x => x.Id == element.UserId).Name} {Users.SingleOrDefault(x => x.Id == element.UserId).Office}".Contains(searchString))
            return true;
        return false;
    }

    private async Task RemoveItem(int id)
    {
        navigation.NavigateTo($"/detail-solution/{id}");
    }
}
